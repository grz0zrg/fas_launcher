//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* mainSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(mainSizer);
    
    mainPanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxFULL_REPAINT_ON_RESIZE|wxTAB_TRAVERSAL|wxBORDER_RAISED);
    
    mainSizer->Add(mainPanel, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* mainContainer = new wxFlexGridSizer(2, 2, 0, 0);
    mainContainer->SetFlexibleDirection( wxBOTH );
    mainContainer->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    mainContainer->AddGrowableCol(0);
    mainContainer->AddGrowableRow(0);
    mainPanel->SetSizer(mainContainer);
    
    wxStaticBoxSizer* sessionsSizer = new wxStaticBoxSizer( new wxStaticBox(mainPanel, wxID_ANY, _("Sessions")), wxVERTICAL);
    
    mainContainer->Add(sessionsSizer, 1, wxALL|wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    wxGridSizer* sessionsSizerChild = new wxGridSizer(0, 1, 0, 0);
    
    sessionsSizer->Add(sessionsSizerChild, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxArrayString sessionsListBoxArr;
    sessionsListBox = new wxListBox(mainPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), sessionsListBoxArr, wxLB_SINGLE);
    
    sessionsSizerChild->Add(sessionsListBox, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    sessionsListBox->SetMinSize(wxSize(320,-1));
    
    wxStaticBoxSizer* fasSizer = new wxStaticBoxSizer( new wxStaticBox(mainPanel, wxID_ANY, _("Server")), wxVERTICAL);
    
    mainContainer->Add(fasSizer, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_collPane194 = new wxCollapsiblePane(mainPanel, wxID_ANY, _("Audio"), wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), wxCP_DEFAULT_STYLE);
    
    fasSizer->Add(m_collPane194, 0, wxALL|wxEXPAND|wxGROW, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer202 = new wxStaticBoxSizer( new wxStaticBox(m_collPane194->GetPane(), wxID_ANY, wxT("")), wxVERTICAL);
    
    wxWindow *m_collpaneWin196 = m_collPane194->GetPane();
    
    m_collpaneWin196->SetSizer(staticBoxSizer202);
    
    wxFlexGridSizer* flexGridSizer82 = new wxFlexGridSizer(5, 2, 0, 0);
    flexGridSizer82->SetFlexibleDirection( wxBOTH );
    flexGridSizer82->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer82->AddGrowableCol(1);
    
    staticBoxSizer202->Add(flexGridSizer82, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    DeviceStaticText = new wxStaticText(m_collPane194->GetPane(), wxID_ANY, _("Device"), wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer82->Add(DeviceStaticText, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    wxArrayString m_choice52Arr;
    sessionsListBoxArr.Add(_("-1"));
    m_choice52 = new wxChoice(m_collPane194->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), m_choice52Arr, 0);
    
    flexGridSizer82->Add(m_choice52, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText62 = new wxStaticText(m_collPane194->GetPane(), wxID_ANY, _("Sample rate"), wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer82->Add(m_staticText62, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    wxArrayString m_choice56Arr;
    m_choice56 = new wxChoice(m_collPane194->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), m_choice56Arr, 0);
    
    flexGridSizer82->Add(m_choice56, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText66 = new wxStaticText(m_collPane194->GetPane(), wxID_ANY, _("Buffer size"), wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer82->Add(m_staticText66, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_spinCtrl64 = new wxSpinCtrl(m_collPane194->GetPane(), wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_spinCtrl64->SetRange(0, 16384);
    m_spinCtrl64->SetValue(512);
    
    flexGridSizer82->Add(m_spinCtrl64, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText58 = new wxStaticText(m_collPane194->GetPane(), wxID_ANY, _("Channels"), wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer82->Add(m_staticText58, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_spinCtrlChannels = new wxSpinCtrl(m_collPane194->GetPane(), wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_spinCtrlChannels->SetRange(1, 16777216);
    m_spinCtrlChannels->SetValue(2);
    
    flexGridSizer82->Add(m_spinCtrlChannels, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticLine94 = new wxStaticLine(m_collPane194->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), wxLI_HORIZONTAL);
    m_staticLine94->Hide();
    
    flexGridSizer82->Add(m_staticLine94, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBox96 = new wxCheckBox(m_collPane194->GetPane(), wxID_ANY, _("ALSA RT"), wxDefaultPosition, wxDLG_UNIT(m_collPane194->GetPane(), wxSize(-1,-1)), 0);
    m_checkBox96->SetValue(false);
    
    flexGridSizer82->Add(m_checkBox96, 0, wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_collPane176 = new wxCollapsiblePane(mainPanel, wxID_ANY, _("Network"), wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), wxCP_DEFAULT_STYLE);
    
    fasSizer->Add(m_collPane176, 0, wxALL|wxEXPAND|wxGROW, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer204 = new wxStaticBoxSizer( new wxStaticBox(m_collPane176->GetPane(), wxID_ANY, wxT("")), wxVERTICAL);
    
    wxWindow *m_collpaneWin186 = m_collPane176->GetPane();
    
    m_collpaneWin186->SetSizer(staticBoxSizer204);
    
    wxFlexGridSizer* flexGridSizer84 = new wxFlexGridSizer(4, 2, 0, 0);
    flexGridSizer84->SetFlexibleDirection( wxBOTH );
    flexGridSizer84->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer84->AddGrowableCol(1);
    
    staticBoxSizer204->Add(flexGridSizer84, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText70 = new wxStaticText(m_collPane176->GetPane(), wxID_ANY, _("IP address"), wxDefaultPosition, wxDLG_UNIT(m_collPane176->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer84->Add(m_staticText70, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_textCtrl72 = new wxTextCtrl(m_collPane176->GetPane(), wxID_ANY, wxT("127.0.0.1"), wxDefaultPosition, wxDLG_UNIT(m_collPane176->GetPane(), wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl72->SetHint(_("127.0.0.1"));
    #endif
    
    flexGridSizer84->Add(m_textCtrl72, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText74 = new wxStaticText(m_collPane176->GetPane(), wxID_ANY, _("Port"), wxDefaultPosition, wxDLG_UNIT(m_collPane176->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer84->Add(m_staticText74, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_spinCtrl86 = new wxSpinCtrl(m_collPane176->GetPane(), wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_collPane176->GetPane(), wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_spinCtrl86->SetRange(0, 65535);
    m_spinCtrl86->SetValue(3003);
    
    flexGridSizer84->Add(m_spinCtrl86, 0, 0, WXC_FROM_DIP(5));
    
    m_staticText98 = new wxStaticText(m_collPane176->GetPane(), wxID_ANY, _("RX Buffer size"), wxDefaultPosition, wxDLG_UNIT(m_collPane176->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer84->Add(m_staticText98, 0, wxALL, WXC_FROM_DIP(5));
    
    m_spinButton100 = new wxSpinButton(m_collPane176->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPane176->GetPane(), wxSize(-1,-1)), wxSP_VERTICAL);
    m_spinButton100->SetRange(0, 16777216);
    m_spinButton100->SetValue(4096);
    
    flexGridSizer84->Add(m_spinButton100, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticLine92 = new wxStaticLine(m_collPane176->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPane176->GetPane(), wxSize(-1,-1)), wxLI_HORIZONTAL);
    m_staticLine92->Hide();
    
    flexGridSizer84->Add(m_staticLine92, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBox90 = new wxCheckBox(m_collPane176->GetPane(), wxID_ANY, _("Compression"), wxDefaultPosition, wxDLG_UNIT(m_collPane176->GetPane(), wxSize(-1,-1)), 0);
    m_checkBox90->SetValue(false);
    
    flexGridSizer84->Add(m_checkBox90, 0, wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_collPane188 = new wxCollapsiblePane(mainPanel, wxID_ANY, _("Synthesis"), wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), wxCP_DEFAULT_STYLE);
    
    fasSizer->Add(m_collPane188, 0, wxALL|wxEXPAND|wxGROW, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer208 = new wxStaticBoxSizer( new wxStaticBox(m_collPane188->GetPane(), wxID_ANY, wxT("")), wxVERTICAL);
    
    wxWindow *m_collpaneWin190 = m_collPane188->GetPane();
    
    m_collpaneWin190->SetSizer(staticBoxSizer208);
    
    wxFlexGridSizer* flexGridSizer104 = new wxFlexGridSizer(4, 2, 0, 0);
    flexGridSizer104->SetFlexibleDirection( wxBOTH );
    flexGridSizer104->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer104->AddGrowableCol(1);
    
    staticBoxSizer208->Add(flexGridSizer104, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText106 = new wxStaticText(m_collPane188->GetPane(), wxID_ANY, _("Noise amount"), wxDefaultPosition, wxDLG_UNIT(m_collPane188->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer104->Add(m_staticText106, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_spinButton108 = new wxSpinCtrlDouble(m_collPane188->GetPane(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDLG_UNIT(m_collPane188->GetPane(), wxSize(-1,-1)), wxSP_ARROW_KEYS, 0, 1.0, 0.1, 0.001);
    m_spinButton108->SetRange(0, 1.0);
    m_spinButton108->SetValue(0.1);
    m_spinButton108->SetIncrement(0.001);
    
    flexGridSizer104->Add(m_spinButton108, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText222 = new wxStaticText(m_collPane188->GetPane(), wxID_ANY, _("Grains folder"), wxDefaultPosition, wxDLG_UNIT(m_collPane188->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer104->Add(m_staticText222, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_textCtrl224 = new wxTextCtrl(m_collPane188->GetPane(), wxID_ANY, wxT("grains"), wxDefaultPosition, wxDLG_UNIT(m_collPane188->GetPane(), wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl224->SetHint(wxT(""));
    #endif
    
    flexGridSizer104->Add(m_textCtrl224, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_collPane192 = new wxCollapsiblePane(mainPanel, wxID_ANY, _("Misc"), wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), wxCP_DEFAULT_STYLE);
    
    fasSizer->Add(m_collPane192, 0, wxALL|wxEXPAND|wxGROW, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer2081 = new wxStaticBoxSizer( new wxStaticBox(m_collPane192->GetPane(), wxID_ANY, wxT("")), wxVERTICAL);
    
    wxWindow *m_collpaneWin220 = m_collPane192->GetPane();
        
    m_collpaneWin220->SetSizer(staticBoxSizer2081);
    
    wxFlexGridSizer* flexGridSizer1042 = new wxFlexGridSizer(4, 2, 0, 0);
    flexGridSizer1042->SetFlexibleDirection( wxBOTH );
    flexGridSizer1042->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1042->AddGrowableCol(1);
    
    staticBoxSizer2081->Add(flexGridSizer1042, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText1105 = new wxStaticText(m_collPane192->GetPane(), wxID_ANY, _("FPS"), wxDefaultPosition, wxDLG_UNIT(m_collPane192->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer1042->Add(m_staticText1105, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_spinButton1126 = new wxSpinButton(m_collPane192->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPane192->GetPane(), wxSize(-1,-1)), wxSP_VERTICAL);
    m_spinButton1126->SetRange(1, 16777216);
    m_spinButton1126->SetValue(60);
    
    flexGridSizer1042->Add(m_spinButton1126, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText1147 = new wxStaticText(m_collPane192->GetPane(), wxID_ANY, _("Frames queue"), wxDefaultPosition, wxDLG_UNIT(m_collPane192->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer1042->Add(m_staticText1147, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_spinButton1168 = new wxSpinButton(m_collPane192->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPane192->GetPane(), wxSize(-1,-1)), wxSP_VERTICAL);
    m_spinButton1168->SetRange(1, 16777216);
    m_spinButton1168->SetValue(7);
    
    flexGridSizer1042->Add(m_spinButton1168, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText1189 = new wxStaticText(m_collPane192->GetPane(), wxID_ANY, _("Commands queue"), wxDefaultPosition, wxDLG_UNIT(m_collPane192->GetPane(), wxSize(-1,-1)), 0);
    
    flexGridSizer1042->Add(m_staticText1189, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_spinButton12010 = new wxSpinButton(m_collPane192->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPane192->GetPane(), wxSize(-1,-1)), wxSP_VERTICAL);
    m_spinButton12010->SetRange(1, 16777216);
    m_spinButton12010->SetValue(16);
    
    flexGridSizer1042->Add(m_spinButton12010, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer128 = new wxBoxSizer(wxVERTICAL);
    
    fasSizer->Add(boxSizer128, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button136 = new wxButton(mainPanel, wxID_ANY, _("Save as default"), wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), 0);
    
    boxSizer128->Add(m_button136, 0, wxEXPAND, WXC_FROM_DIP(5));
    m_button136->SetMinSize(wxSize(120,-1));
    
    m_button139 = new wxButton(mainPanel, wxID_ANY, _("Rescan devices"), wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), 0);
    
    boxSizer128->Add(m_button139, 0, wxEXPAND, WXC_FROM_DIP(5));
    m_button139->SetMinSize(wxSize(120,-1));
    
    m_button229 = new wxButton(mainPanel, wxID_ANY, _("Start"), wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), 0);
    
    boxSizer128->Add(m_button229, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer235 = new wxBoxSizer(wxHORIZONTAL);
    boxSizer235->SetMinSize(32,-1);
    
    mainContainer->Add(boxSizer235, 1, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(5));
    
    m_button231 = new wxButton(mainPanel, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), wxBU_EXACTFIT);
    
    boxSizer235->Add(m_button231, 0, 0, WXC_FROM_DIP(5));
    m_button231->SetMinSize(wxSize(32,-1));
    
    m_button233 = new wxButton(mainPanel, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(mainPanel, wxSize(-1,-1)), wxBU_EXACTFIT);
    
    boxSizer235->Add(m_button233, 0, 0, WXC_FROM_DIP(5));
    m_button233->SetMinSize(wxSize(32,-1));
    boxSizer235->SetMinSize(wxSize(32,-1));
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_name6 = new wxMenu();
    m_menuBar->Append(m_name6, _("File"));
    
    m_menuItem7 = new wxMenuItem(m_name6, wxID_EXIT, _("Exit\tAlt-X"), _("Quit"), wxITEM_NORMAL);
    m_name6->Append(m_menuItem7);
    
    m_name8 = new wxMenu();
    m_menuBar->Append(m_name8, _("Help"));
    
    m_menuItem9 = new wxMenuItem(m_name8, wxID_ANY, _("Documentation"), wxT(""), wxITEM_NORMAL);
    m_name8->Append(m_menuItem9);
    
    m_name8->AppendSeparator();
    
    m_menuItem182 = new wxMenuItem(m_name8, wxID_ABOUT, _("About"), wxT(""), wxITEM_NORMAL);
    m_name8->Append(m_menuItem182);
    
    SetName(wxT("MainFrameBaseClass"));
    SetSize(500,360);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(m_menuItem7->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnDocumentation), NULL, this);
    this->Connect(m_menuItem182->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    this->Connect(m_choice52->GetId(), wxEVT_CHOICE, wxCommandEventHandler(MainFrameBaseClass::OnDeviceSelected), NULL, this);
    this->Connect(m_button231->GetId(), wxEVT_BUTTON, wxCommandEventHandler(MainFrameBaseClass::OnAddSessionClicked), NULL, this);
    this->Connect(m_button233->GetId(), wxEVT_BUTTON, wxCommandEventHandler(MainFrameBaseClass::OnDelSessionClicked), NULL, this);
    this->Connect(m_button229->GetId(), wxEVT_BUTTON, wxCommandEventHandler(MainFrameBaseClass::OnLaunchFASClicked), NULL, this);
    this->Connect(m_button136->GetId(), wxEVT_BUTTON, wxCommandEventHandler(MainFrameBaseClass::OnSaveAsDefaultClicked), NULL, this);
    this->Connect(sessionsListBox->GetId(), wxEVT_LISTBOX, wxCommandEventHandler(MainFrameBaseClass::OnSessionSelected), NULL, this);
    this->Connect(sessionsListBox->GetId(), wxEVT_LISTBOX_DCLICK, wxCommandEventHandler(MainFrameBaseClass::OnSessionDblClick), NULL, this);

    this->Connect(m_choice52->GetId(), wxEVT_CHOICE, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_choice56->GetId(), wxEVT_CHOICE, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_spinCtrl64->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_spinCtrlChannels->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_checkBox96->GetId(), wxEVT_CHECKBOX, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_textCtrl72->GetId(), wxEVT_TEXT, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_spinCtrl86->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_spinButton100->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_checkBox90->GetId(), wxEVT_CHECKBOX, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_spinButton108->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_textCtrl224->GetId(), wxEVT_TEXT, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_spinButton1126->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_spinButton1168->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Connect(m_spinButton12010->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(m_menuItem7->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnDocumentation), NULL, this);
    this->Disconnect(m_menuItem182->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    this->Disconnect(m_choice52->GetId(), wxEVT_CHOICE, wxCommandEventHandler(MainFrameBaseClass::OnDeviceSelected), NULL, this);
    this->Disconnect(m_button231->GetId(), wxEVT_BUTTON, wxCommandEventHandler(MainFrameBaseClass::OnAddSessionClicked), NULL, this);
    this->Disconnect(m_button233->GetId(), wxEVT_BUTTON, wxCommandEventHandler(MainFrameBaseClass::OnDelSessionClicked), NULL, this);
    this->Disconnect(m_button229->GetId(), wxEVT_BUTTON, wxCommandEventHandler(MainFrameBaseClass::OnLaunchFASClicked), NULL, this);
    this->Disconnect(m_button136->GetId(), wxEVT_BUTTON, wxCommandEventHandler(MainFrameBaseClass::OnSaveAsDefaultClicked), NULL, this);
    this->Disconnect(sessionsListBox->GetId(), wxEVT_LISTBOX, wxCommandEventHandler(MainFrameBaseClass::OnSessionSelected), NULL, this);
    this->Disconnect(sessionsListBox->GetId(), wxEVT_LISTBOX_DCLICK, wxCommandEventHandler(MainFrameBaseClass::OnSessionDblClick), NULL, this);

    this->Disconnect(m_choice52->GetId(), wxEVT_CHOICE, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_choice56->GetId(), wxEVT_CHOICE, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_spinCtrl64->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_spinCtrlChannels->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_checkBox96->GetId(), wxEVT_CHECKBOX, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_textCtrl72->GetId(), wxEVT_TEXT, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_spinCtrl86->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_spinButton100->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_checkBox90->GetId(), wxEVT_CHECKBOX, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_spinButton108->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_textCtrl224->GetId(), wxEVT_TEXT, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_spinButton1126->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_spinButton1168->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
    this->Disconnect(m_spinButton12010->GetId(), wxEVT_SPINCTRL, wxCommandEventHandler(MainFrameBaseClass::OnSettingsChanged), NULL, this);
}
